<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.zn.ddxj.mapper.UserPasswordMapper" >

    <resultMap id="BaseResultMap" type="net.zn.ddxj.entity.UserPassword" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="user_id" property="userId" jdbcType="INTEGER" />
        <result column="login_password" property="loginPassword" jdbcType="VARCHAR" />
        <result column="pay_password" property="payPassword" jdbcType="VARCHAR" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
    </resultMap>

    <sql id="Base_Column_List" >
        id, user_id, login_password, pay_password, create_time, update_time, flag
    </sql>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from zn_user_password
        where id = #{id,jdbcType=INTEGER} and flag = 1
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from zn_user_password
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="net.zn.ddxj.entity.UserPassword" >
        insert into zn_user_password (id, user_id, login_password, 
            pay_password, create_time, update_time, 
            flag)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{loginPassword,jdbcType=VARCHAR}, 
            #{payPassword,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
            #{flag,jdbcType=INTEGER})
    </insert>

    <insert id="insertSelective" parameterType="net.zn.ddxj.entity.UserPassword" >
        insert into zn_user_password
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="userId != null" >
                user_id,
            </if>
            <if test="loginPassword != null" >
                login_password,
            </if>
            <if test="payPassword != null" >
                pay_password,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
            <if test="flag != null" >
                flag,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null" >
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="loginPassword != null" >
                #{loginPassword,jdbcType=VARCHAR},
            </if>
            <if test="payPassword != null" >
                #{payPassword,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                #{flag,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="net.zn.ddxj.entity.UserPassword" >
        update zn_user_password
        <set >
            <if test="userId != null" >
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="loginPassword != null" >
                login_password = #{loginPassword,jdbcType=VARCHAR},
            </if>
            <if test="payPassword != null" >
                pay_password = #{payPassword,jdbcType=VARCHAR},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                flag = #{flag,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="net.zn.ddxj.entity.UserPassword" >
        update zn_user_password
        set user_id = #{userId,jdbcType=INTEGER},
            login_password = #{loginPassword,jdbcType=VARCHAR},
            pay_password = #{payPassword,jdbcType=VARCHAR},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            flag = #{flag,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <!-- 通过userId查询password -->
    <select id="selectPasswordByUserId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
     select 
        <include refid="Base_Column_List" />
        from zn_user_password
        where user_Id = #{userId} and flag = 1
    </select>
    <!-- 根据手机号修改登录密码 -->
    <update id="updateUserPasswordByPhone" parameterType="net.zn.ddxj.entity.UserPassword">
    	UPDATE  zn_user_password  SET login_password=#{password} WHERE user_id=#{userId}
    </update>
    <select id="queryLoginPasswordStatus" parameterType="java.lang.Integer" resultType="int">
    	SELECT count(id) FROM zn_user_password where user_id = #{userId} and flag = 1 and login_password IS NOT NULL
    </select>
    <select id="queryPayPasswordStatus" parameterType="java.lang.Integer" resultType="int">
   	 	SELECT count(id) FROM zn_user_password where user_id = #{userId} and flag = 1 and pay_password IS NOT NULL
    </select>
    <!-- 删除用户的密码 -->
    <delete id="delUserPasswordRecord" parameterType="java.lang.Integer" >
        delete from zn_user_password
        where user_id = #{userId,jdbcType=INTEGER}
    </delete>
</mapper>