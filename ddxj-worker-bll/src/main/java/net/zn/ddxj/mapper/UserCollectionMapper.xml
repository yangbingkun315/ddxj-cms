<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.zn.ddxj.mapper.UserCollectionMapper" >

    <resultMap id="BaseResultMap" type="net.zn.ddxj.entity.UserCollection" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="from_user_id" property="fromUserId" jdbcType="INTEGER" />
        <result column="recruit_id" property="recruitId" jdbcType="INTEGER" />
        <result column="to_user_id" property="toUserId" jdbcType="INTEGER" />
        <result column="collection_type" property="collectionType" jdbcType="INTEGER" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <result column="info_id" property="infoId" jdbcType="INTEGER" />
    </resultMap>
    
    <resultMap id="InformationResultMap" type="net.zn.ddxj.entity.Information" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="info_title" property="infoTitle" jdbcType="VARCHAR" />
        <result column="info_type" property="infoType" jdbcType="INTEGER" />
        <result column="stick" property="stick" jdbcType="INTEGER" />
        <result column="info_summary" property="infoSummary" jdbcType="VARCHAR" />
        <result column="author" property="author" jdbcType="VARCHAR" />
        <result column="image_one" property="imageOne" jdbcType="VARCHAR" />
        <result column="image_two" property="imageTwo" jdbcType="VARCHAR" />
        <result column="image_three" property="imageThree" jdbcType="VARCHAR" />
        <result column="info_label" property="infoLabel" jdbcType="VARCHAR" />
        <result column="start_time" property="startTime" jdbcType="TIMESTAMP" />
        <result column="end_time" property="endTime" jdbcType="TIMESTAMP" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <!-- 一对一  资讯是否过期 -->
        <association property="isLower" column="id" select="net.zn.ddxj.mapper.InformationMapper.queryInformationLower" javaType="java.lang.Integer"></association>
    </resultMap>

    <sql id="Base_Column_List" >
        id, from_user_id, recruit_id, to_user_id, collection_type, create_time, update_time, 
        flag, info_id
    </sql>
    
	<!-- 查询所有收藏的资讯  -->
    <select id="queryCollectionInformation" resultMap="InformationResultMap" parameterType="net.zn.ddxj.vo.RequestVo" >
		select  zi.id, zi.info_title, zi.info_type, zi.stick, zi.info_summary,zi.author, zi.image_one, 
				zi.image_two, zi.image_three, zi.info_label, zi.start_time, zi.end_time, zi.create_time, zi.update_time, zi.flag
				,(select count(ir.id) from zn_information_record_ip ir where ir.info_id = zi.id) as readPeople,uc.create_time as collectionTime
		from zn_user_collection uc
			INNER JOIN zn_information AS zi on zi.id = uc.info_id and uc.collection_type = 3 and uc.from_user_id = #{userId}
			where uc.flag = 1
		order by uc.create_time desc,zi.end_time desc
    </select>
    
    <!-- 查询是否有收藏资讯的记录  -->
    <select id="queryInformationCollection" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select zn.*
        from zn_user_collection zn
        where zn.from_user_id = #{userId} and zn.info_id is not null and zn.info_id = #{infoId} and zn.collection_type = 3
    </select>
    
    <!-- 更新用户收藏资讯状态  -->
    <update id="updateInformationCollection" parameterType="java.lang.Integer">
    	UPDATE zn_user_collection SET flag = #{flag} WHERE id = #{collectionId} and from_user_id = #{userId} and collection_type = 3
    </update>
    
    <!-- 查询是否有收藏记录  -->
    <select id="queryUserIsCollection" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select zn.*
        from zn_user_collection zn
        where zn.from_user_id = #{userId} and zn.recruit_id is not null and zn.recruit_id = #{recruitId} and zn.collection_type = 2
    </select>
    
    <select id="queryUserIsFollow" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    	select zn.*
        from zn_user_collection zn
        where zn.from_user_id = #{fromUserId} and zn.to_user_id is not null and zn.to_user_id = #{toUserId} and zn.collection_type = 1
    </select>
	
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from zn_user_collection
        where id = #{id,jdbcType=INTEGER}
    </select>
    
    <!-- 收藏的活动数量 -->
    <select id="selectRecruitCount" resultType="java.lang.Integer">
    	select count(1) from zn_user_collection uc inner join zn_recruit r on uc.recruit_id = r.id where uc.from_user_id = #{userId} and uc.collection_type = 2 and uc.flag = 1 and r.flag = 1 AND uc.recruit_id IS NOT NULL
    </select>
    
    <!-- 关注的工头数量 -->
    <select id="selectUserCount" resultType="java.lang.Integer">
    	select count(1) from zn_user_collection where from_user_id = #{userId} and collection_type = 1 and flag = 1
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from zn_user_collection
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="net.zn.ddxj.entity.UserCollection" >
        insert into zn_user_collection (id, from_user_id, recruit_id, 
            to_user_id, collection_type, create_time, 
            update_time, flag, info_id)
        values (#{id,jdbcType=INTEGER}, #{fromUserId,jdbcType=INTEGER}, #{recruitId,jdbcType=INTEGER}, 
            #{toUserId,jdbcType=INTEGER}, #{collectionType,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP}, 
            #{updateTime,jdbcType=TIMESTAMP}, #{flag,jdbcType=INTEGER}, #{infoId,jdbcType=INTEGER})
    </insert>

    <insert id="insertSelective" parameterType="net.zn.ddxj.entity.UserCollection" useGeneratedKeys="true" keyProperty="id">
        insert into zn_user_collection
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="fromUserId != null" >
                from_user_id,
            </if>
            <if test="recruitId != null" >
                recruit_id,
            </if>
            <if test="toUserId != null" >
                to_user_id,
            </if>
            <if test="collectionType != null" >
                collection_type,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
            <if test="flag != null" >
                flag,
            </if>
            <if test="infoId != null" >
                info_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="fromUserId != null" >
                #{fromUserId,jdbcType=INTEGER},
            </if>
            <if test="recruitId != null" >
                #{recruitId,jdbcType=INTEGER},
            </if>
            <if test="toUserId != null" >
                #{toUserId,jdbcType=INTEGER},
            </if>
            <if test="collectionType != null" >
                #{collectionType,jdbcType=INTEGER},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                #{flag,jdbcType=INTEGER},
            </if>
            <if test="infoId != null" >
                #{infoId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="net.zn.ddxj.entity.UserCollection" >
        update zn_user_collection
        <set >
            <if test="fromUserId != null" >
                from_user_id = #{fromUserId,jdbcType=INTEGER},
            </if>
            <if test="recruitId != null" >
                recruit_id = #{recruitId,jdbcType=INTEGER},
            </if>
            <if test="toUserId != null" >
                to_user_id = #{toUserId,jdbcType=INTEGER},
            </if>
            <if test="collectionType != null" >
                collection_type = #{collectionType,jdbcType=INTEGER},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                flag = #{flag,jdbcType=INTEGER},
            </if>
            <if test="infoId != null" >
                info_id = #{infoId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="net.zn.ddxj.entity.UserCollection" >
        update zn_user_collection
        set from_user_id = #{fromUserId,jdbcType=INTEGER},
            recruit_id = #{recruitId,jdbcType=INTEGER},
            to_user_id = #{toUserId,jdbcType=INTEGER},
            collection_type = #{collectionType,jdbcType=INTEGER},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            flag = #{flag,jdbcType=INTEGER},
            info_id = #{infoId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
    
    <select id="selectByUserIdAndToUserId" resultType="java.lang.Integer">
    	select 
        count(1)
        from zn_user_collection
        where from_user_id = #{fromUserId} and to_user_id = #{toUserId} and flag = 1
    </select>
    
    <!-- 更新用户关注状态  -->
    <update id="updateUserFollowById" parameterType="java.lang.Integer">
    	UPDATE zn_user_collection SET flag = #{flag} WHERE id = #{collectionId} and from_user_id = #{userId} and collection_type = 1
    </update>
    
    <!-- 删除收藏,关注 -->
    <delete id="deleteUserCollection" parameterType="java.lang.Integer" >
        delete from zn_user_collection
        where from_user_id = #{userId} or to_user_id=#{userId}
    </delete>
    <!-- 删除收藏,关注 -->
    <delete id="delUserCollectionRecord" parameterType="java.lang.Integer" >
        delete from zn_user_collection
        where from_user_id = #{userId} or to_user_id=#{userId}
    </delete>
</mapper>