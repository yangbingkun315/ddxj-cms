<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.zn.ddxj.mapper.SendMessageUserMapper" >

    <resultMap id="BaseResultMap" type="net.zn.ddxj.entity.SendMessageUser" >
        <id column="id" property="id" jdbcType="INTEGER" />
        <result column="user_id" property="userId" jdbcType="INTEGER" />
        <result column="send_type" property="sendType" jdbcType="INTEGER" />
        <result column="send_time" property="sendTime" jdbcType="TIMESTAMP" />
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP" />
        <result column="flag" property="flag" jdbcType="INTEGER" />
        <result column="message_id" property="messageId" jdbcType="INTEGER" />
        <!--一对一关系 -->
        <association property="user" column="user_id" select="net.zn.ddxj.mapper.UserMapper.queryUserDetail" ></association>
    </resultMap>

    <sql id="Base_Column_List" >
        id, user_id, send_type, send_time, create_time, update_time, flag, message_id
    </sql>

	<!-- 多条件查询群发用户 -->
    <select id="querySendMessageUserList" resultMap="BaseResultMap" parameterType="net.zn.ddxj.vo.RequestVo" >
        select 
        <include refid="Base_Column_List" />
        from zn_send_message_user
        where flag = 1
        <if test="msgId != null and msgId != ''">
        	and message_id = #{msgId}
        </if>
        <if test="sendType != null and sendType != ''">
        	and send_type = #{sendType}
        </if>
        <if test="createTime != null and createTime !=''">
			and DATE_FORMAT(create_time, '%Y-%m-%d') = DATE_FORMAT(#{createTime} , '%Y-%m-%d')
		</if>
        order by create_time
    </select>
    
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
        select 
        <include refid="Base_Column_List" />
        from zn_send_message_user
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
        delete from zn_send_message_user
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="net.zn.ddxj.entity.SendMessageUser" >
        insert into zn_send_message_user (id, user_id, send_type, 
            send_time, create_time, update_time, 
            flag, message_id)
        values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{sendType,jdbcType=INTEGER}, 
            #{sendTime,jdbcType=TIMESTAMP}, #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, 
            #{flag,jdbcType=INTEGER}, #{messageId,jdbcType=INTEGER})
    </insert>

    <insert id="insertSelective" parameterType="net.zn.ddxj.entity.SendMessageUser" >
        insert into zn_send_message_user
        <trim prefix="(" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                id,
            </if>
            <if test="userId != null" >
                user_id,
            </if>
            <if test="sendType != null" >
                send_type,
            </if>
            <if test="sendTime != null" >
                send_time,
            </if>
            <if test="createTime != null" >
                create_time,
            </if>
            <if test="updateTime != null" >
                update_time,
            </if>
            <if test="flag != null" >
                flag,
            </if>
            <if test="messageId != null" >
                message_id,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides="," >
            <if test="id != null" >
                #{id,jdbcType=INTEGER},
            </if>
            <if test="userId != null" >
                #{userId,jdbcType=INTEGER},
            </if>
            <if test="sendType != null" >
                #{sendType,jdbcType=INTEGER},
            </if>
            <if test="sendTime != null" >
                #{sendTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null" >
                #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                #{flag,jdbcType=INTEGER},
            </if>
            <if test="messageId != null" >
                #{messageId,jdbcType=INTEGER},
            </if>
        </trim>
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="net.zn.ddxj.entity.SendMessageUser" >
        update zn_send_message_user
        <set >
            <if test="userId != null" >
                user_id = #{userId,jdbcType=INTEGER},
            </if>
            <if test="sendType != null" >
                send_type = #{sendType,jdbcType=INTEGER},
            </if>
            <if test="sendTime != null" >
                send_time = #{sendTime,jdbcType=TIMESTAMP},
            </if>
            <if test="createTime != null" >
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null" >
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="flag != null" >
                flag = #{flag,jdbcType=INTEGER},
            </if>
            <if test="messageId != null" >
                message_id = #{messageId,jdbcType=INTEGER},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="net.zn.ddxj.entity.SendMessageUser" >
        update zn_send_message_user
        set user_id = #{userId,jdbcType=INTEGER},
            send_type = #{sendType,jdbcType=INTEGER},
            send_time = #{sendTime,jdbcType=TIMESTAMP},
            create_time = #{createTime,jdbcType=TIMESTAMP},
            update_time = #{updateTime,jdbcType=TIMESTAMP},
            flag = #{flag,jdbcType=INTEGER},
            message_id = #{messageId,jdbcType=INTEGER}
        where id = #{id,jdbcType=INTEGER}
    </update>
</mapper>